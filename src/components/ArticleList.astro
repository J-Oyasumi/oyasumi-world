---
import { getLocalizedContent, detectLanguage, t } from '../utils/i18n';

interface Props {
  posts: any[];
  currentPath: string;
  currentLang: 'zh' | 'en';
  category: string;
}

const { posts, currentPath, currentLang, category } = Astro.props;

// 获取本地化的文章列表
const localizedPosts = posts.map(post => ({
  ...post,
  frontmatter: {
    ...post.frontmatter,
    ...getLocalizedContent(post.frontmatter, currentLang)
  }
}));

// 获取板块标题
const getCategoryTitle = (category: string, lang: 'zh' | 'en') => {
  return t(`sections.${category}`, lang);
};

const categoryTitle = getCategoryTitle(category, currentLang);
---

<div class="article-list">
  <h3 class="list-title">{categoryTitle}</h3>
  <div class="list-container">
    {localizedPosts.map((post) => (
      <a 
        href={post.url} 
        class={`list-item ${post.url === currentPath ? 'active' : ''}`}
        title={post.frontmatter.description}
      >
        <div class="item-content">
          <h4 class="item-title">{post.frontmatter.title}</h4>
          <div class="item-meta">
            <span class="item-date">{post.frontmatter.date}</span>
            {post.frontmatter.tags && post.frontmatter.tags.length > 0 && (
              <div class="item-tags">
                {post.frontmatter.tags.slice(0, 2).map((tag: string) => (
                  <span class="tag">{tag}</span>
                ))}
              </div>
            )}
          </div>
        </div>
      </a>
    ))}
  </div>
</div>

<style>
  .article-list {
    padding: 1rem;
    background: var(--theme-bg);
    border-radius: 0.5rem;
    position: sticky;
    top: 1rem;
    max-height: calc(100vh - 2rem);
    overflow-y: auto;
  }

  .list-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--theme-text);
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--theme-divider);
  }

  .list-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .list-item {
    display: block;
    padding: 0.75rem;
    border-radius: 0.375rem;
    background: var(--theme-bg-offset);
    border: 1px solid transparent;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  .list-item:hover {
    background: var(--theme-bg-hover);
    border-color: var(--theme-accent);
    transform: translateY(-1px);
  }

  .list-item.active {
    background: var(--theme-accent);
    color: white;
  }

  .list-item.active .item-title {
    color: white;
  }

  .list-item.active .item-meta {
    color: rgba(255, 255, 255, 0.8);
  }

  .list-item.active .tag {
    background: rgba(255, 255, 255, 0.2);
    color: white;
  }

  .item-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .item-title {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--theme-text);
    margin: 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .item-meta {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    font-size: 0.75rem;
    color: var(--theme-text-light);
  }

  .item-date {
    opacity: 0.7;
  }

  .item-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .tag {
    background: var(--theme-code-bg);
    color: var(--theme-code-text);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.625rem;
    font-weight: 500;
  }

  /* 移动端隐藏 */
  @media (max-width: 72em) {
    .article-list {
      display: none;
    }
  }

  /* 滚动条样式 */
  .list-container::-webkit-scrollbar {
    width: 4px;
  }

  .list-container::-webkit-scrollbar-track {
    background: transparent;
  }

  .list-container::-webkit-scrollbar-thumb {
    background: var(--theme-divider);
    border-radius: 2px;
  }

  .list-container::-webkit-scrollbar-thumb:hover {
    background: var(--theme-text-light);
  }
</style>
